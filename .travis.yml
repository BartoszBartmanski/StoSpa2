# will build a C++ programme
language: cpp

matrix:
  allow_failures:
    - os: osx

  include:
    # Linux, GCC
    - os: linux
      sudo: required
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - g++-4.9
      env:
         - MATRIX_EVAL="CC=gcc-4.9 && CXX=g++-4.9"

    - os: linux
      sudo: required
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - g++-5
      env:
         - MATRIX_EVAL="CC=gcc-5 && CXX=g++-5"

    - os: linux
      sudo: required
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - g++-6
      env:
        - MATRIX_EVAL="CC=gcc-6 && CXX=g++-6"

    - os: linux
      sudo: required
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - g++-7
      env:
        - MATRIX_EVAL="CC=gcc-7 && CXX=g++-7"

    # Linux, clang
    - os: linux
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
            - llvm-toolchain-precise-3.6
          packages:
            - clang-3.6
      env:
        - MATRIX_EVAL="CC=clang-3.6 && CXX=clang++-3.6"

    - os: linux
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
            - llvm-toolchain-precise-3.7
          packages:
            - clang-3.7
      env:
        - MATRIX_EVAL="CC=clang-3.7 && CXX=clang++-3.7"

    - os: linux
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
            - llvm-toolchain-precise-3.8
          packages:
            - clang-3.8
      env:
        - MATRIX_EVAL="CC=clang-3.8 && CXX=clang++-3.8"

    - os: linux
      addons:
        apt:
          sources:
            - llvm-toolchain-trusty-3.9
          packages:
            - clang-3.9
      env:
        - MATRIX_EVAL="CC=clang-3.9 && CXX=clang++-3.9"

    - os: linux
      addons:
        apt:
          sources:
            - llvm-toolchain-trusty-4.0
          packages:
            - clang-4.0
      env:
        - MATRIX_EVAL="CC=clang-4.0 && CXX=clang++-4.0"

    - os: linux
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - clang-5.0
      env:
        - MATRIX_EVAL="CC=clang-5.0 && CXX=clang++-5.0"

    # OSX
    - os: osx
      osx_image: xcode9

    - os: osx
      osx_image: xcode9.1

    - os: osx
      osx_image: xcode9.2

    - os: osx
      osx_image: xcode9.3

    - os: osx
      osx_image: xcode9.4

    - os: osx
      osx_image: xcode10

    - os: osx
      osx_image: xcode10.1

    - os: osx
      osx_image: xcode10.2

    - os: osx
      osx_image: xcode10.3

    - os: osx
      osx_image: xcode11

    - os: osx
      osx_image: xcode11.1

    - os: osx
      osx_image: xcode11.1

    - os: osx
      osx_image: xcode11.2

    - os: osx
      osx_image: xcode11.3


before_install:
    - eval "${MATRIX_EVAL}"

# install dependencies
install:
    - git submodule update --init --recursive
    - if [ "$TRAVIS_OS_NAME" = "osx" ]; then
        brew update;
        brew install cmake ninja boost;
        wget https://repo.continuum.io/miniconda/Miniconda3-latest-MacOSX-x86_64.sh -O miniconda.sh;
      fi
    - if [ "$TRAVIS_OS_NAME" = "linux" ]; then
        sudo apt-get update;
        sudo apt-get install -y libboost-all-dev;
        wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh;
      fi
    - bash miniconda.sh -b -p $HOME/miniconda
    - source "$HOME/miniconda/etc/profile.d/conda.sh"
    - hash -r
    - conda config --set always_yes yes --set changeps1 no
    - conda update -q conda
    - conda info -a

    - conda create -q -n test-environment python=$TRAVIS_PYTHON_VERSION
    - conda activate test-environment
    - conda install -c conda-forge scikit-build


# prepare build process
before_script:
    - mkdir ${TRAVIS_BUILD_DIR}/build
    - cd ${TRAVIS_BUILD_DIR}/build

# build and test
script:
    - cmake ../ -DCMAKE_BUILD_TYPE=Debug
    - make -j2
    - make all
    - ./tests/unittests
    - cd ../
    - python setup.py install
